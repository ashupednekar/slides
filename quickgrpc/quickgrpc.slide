# Quick gRPC

Ashu Pednekar 
21 Sep 2024
ashupednekar49@gmail.com

## Welcome to Quick gRPC

Ready to ditch WSGI and join the microservices party? Letâ€™s gRPC and roll!

.image one.jpg 500 1000

## But REST api's are great... Why bother?

<br><br>

.html two.html

## Are they though? ðŸ«¤

<br><br>

.html three.html

## And then there's WSGI
<br><br>

WSGI/ASGI: Where Python speed goes for a toss.

Gunicorn: Because who doesnâ€™t love configuring worker counts for every full moon?

Async in ASGI? Sure, if you enjoy threading needles with spaghetti.

Scaling? Just keep throwing Gunicorn workers at it and pray.

Deployment is a breeze... said no one ever.

## So what exactly is gRPC

<br>
gRPC is like a supercharged intercom system for your microservices. ðŸš€
<br><br>

- **Protocol:** Think of HTTP/2 as the speedy highway for your data, zipping it around efficiently.
- **Serialization:** Protocol Buffers (protobuf) are like a universal translator, helping different services speak the same language.
- **Language Support:** Supports multiple languages, so you can have a polyglot party and everyone gets along!
- **Streaming:** Handles requests and responses like a pro, even when theyâ€™re long-winded or chatty.

## Protobuf

.html protobuf.html

## Let's build one

We'll build a simple crud service 

Let's define the protobud in a `.proto` file

We start a proto file by specifying the syntax version, like so

.code crud0.proto

Here's a link to the protobuf definition

.image qrcode_protobuf.dev.png 200 200
.link https://protobuf.dev

## Let's start with the messages

.code crud1.proto

## Now let's define the services
<br>

.code crud2.proto

<br><br>
The service handles creating, listing, retrieving, updating, and deleting employee records.
<br><br>
Handles everything from adding a new hire to giving them the boot, with input as EmployeeInp and output as Employeeâ€”because even computers need paperwork.

## What next?

This is how it works

When working with protoc, think of it as the translator who turns your .proto files into code that your project can actually speak to. 

`protoc --<language>_out=<output_directory> <file>.proto` does the trick, generating all the gRPC wrapper code youâ€™ll need. 


Here's a link to the docs 

.image qrcode_grpc.io.py.png 200 200
.link https://grpc.io/docs/languages/python/


## So what's quickgRPC ?

It's a simple tool that makes this process much nicer, where you just give it your proto and it spits out boilerplate server and client skeletal code

Another thing it does is put the protoc generated code in `site packages` so that you don't have to ship it along with your server code.

Here's a link to the docs 

.image qrcode_ashupednekar.github.io.png 200 200
.link https://ashupednekar.github.io/quickgrpc/Getting%20Started/

*Demo time ðŸ˜„*

## Let's start defining our service with rpc's 

.video demorpc.mov video/mp4 580 1000

## Now, we need to define these messages

.video demomessages.mov video/mp4 580 1000

## QuickGrpc in Action

.video demogen.mov video/mp4 580 1000

## So far...

We wrote out proto file, with rpc's and their corresponding mmessages

Used the `create_grpc_service` command to generate the boilerplate code we'll need

Looked at proto file validations passed through from protoc

<br>

**Few considerations**

The quickgrpc library currently makes a few assumptions
- proto file name same as the service name, with the latter being in Title case
- single service in proto file

These things can change, if there's enough interest... maybe a go/rust rewrite/language support

## Let's write the rpc business logic

.video demorpclogic.mov video/mp4 580 1000


## Now let's update the tests

.video demorpclogic.mov video/mp4 580 1000

## Voila

.video deburesult.mov video/mp4 580 1000
